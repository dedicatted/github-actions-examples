name: Terraform Apply

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment for this deployment"
        type: choice
        options:
          - dev
          - prod
        required: true
      terraform_apply:
        description: "Whether to apply the Terraform changes"
        required: true
        default: "false"
      terraform_destroy:
        description: "Whether to destroy the Terraform infrastructure"
        required: true
        default: "false"

env:
  TF_STATE_BUCKET: ${{ github.event.inputs.environment }}-s3-state
  TF_VAR_env_name: ${{ github.event.inputs.environment }}
  TF_VAR_portal_prefix: ${{ github.event.inputs.environment }}

jobs:
  deployment:
    name: ${{ github.event.inputs.environment }} API Deployment
    environment: ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check if S3 Bucket For State Exists
        id: check-bucket
        run: |
          if aws s3 ls "s3://$TF_STATE_BUCKET" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "S3 bucket does not exist"
            echo "Creating the bucket"
            # Create the bucket
            aws s3api create-bucket --bucket "$TF_STATE_BUCKET" --region $AWS_DEFAULT_REGION
            echo "S3 bucket created"
          else
            echo "S3 bucket exists"
          fi

      - name: Generate backend.conf
        run: |
          echo "bucket = \"$TF_STATE_BUCKET\"" > backend.conf
          echo "key    = \"$TF_VAR_env_name/terraform.tfstate\"" >> backend.conf
          echo "region = \"$AWS_DEFAULT_REGION\"" >> backend.conf
          echo "encrypt = true" >> backend.conf

      - name: Terraform init
        run: |
          terraform init -backend-config=backend.conf

      - name: Terraform Plan
        run: |
          terraform plan -out=tfplan

      - name: Terraform Apply
        if: ${{ github.event.inputs.terraform_apply == 'true' }}
        run: |
          terraform apply tfplan

      - name: Terraform Destroy
        if: ${{ env.terraform_destroy == 'true' && env.terraform_destroy2 == 'true' }}
        run: |
          terraform init
          terraform destroy -auto-approve
        env:
          terraform_destroy: ${{ github.event.inputs.terraform_destroy }}
